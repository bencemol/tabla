// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([identifier, token])
}

model Board {
  id        String      @id @default(cuid())
  name      String      @db.Text
  tasks     Task[]
  states    TaskState[]
  owner     User        @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt

  @@index([ownerId])
  @@fulltext([name])
}

model Task {
  id          String    @id @default(cuid())
  title       String    @db.Text
  description String?   @db.Text
  board       Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     String
  priority    Int       @default(autoincrement())
  state       TaskState @relation(fields: [stateId], references: [id], onDelete: Cascade)
  stateId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@index([boardId])
  @@index([priority])
  @@index([stateId])
  @@fulltext([title, description])
}

model TaskState {
  id        String   @id @default(cuid())
  name      String   @db.Text
  order     Int      @default(autoincrement())
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([order])
  @@index([boardId])
}
